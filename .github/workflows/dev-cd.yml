name: CD - Build & Deploy for noonddu

on:
  push:
    branches: [ develop ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. Java 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 캐시
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. 실행 권한
      - name: Grant execute permission
        run: chmod +x ./gradlew

      # 5. SHA 추출
      - name: Extract short SHA
        id: vars
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # 6. env.properties 생성 (JAR 외부에 생성해 보안 취약점 예방)
      - name: Generate env.properties
        run: |
          mkdir -p /tmp/config
          printf "%s" "${{ secrets.DEV_ENV_PROPERTIES }}" > /tmp/config/env.properties

      # 7. 빌드
      - name: Build JAR
        run: ./gradlew bootJar --no-daemon

      # 8. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 9. Docker 이미지 빌드 및 푸시 (SHA 태그만)
      - name: Build and push Docker image
        env:
          IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/noonddu-was
        run: |
          TAG=${{ steps.vars.outputs.sha }}
          echo "Building image with tag: $TAG"
          docker build -t $IMAGE_NAME:$TAG .
          docker push $IMAGE_NAME:$TAG

      # 10. EC2 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/noonddu-was:${{ steps.vars.outputs.sha }}

            echo "Deploying image: $IMAGE"

            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            docker stop noonddu-was || true
            docker rm noonddu-was || true

            docker pull $IMAGE

            docker run -d \
              --name noonddu-was \
              -p 8080:8080 \
              --restart unless-stopped \
              -e TZ=Asia/Seoul \
              $IMAGE

            docker image prune -af
