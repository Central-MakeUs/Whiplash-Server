plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id "io.sentry.jvm.gradle" version "5.9.0"
}

group = 'akuma'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

sentry {
	includeSourceContext = true

	org = "akuma-ir"
	projectName = "nuntteo_dev"
	authToken = System.getenv("SENTRY_AUTH_TOKEN")
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

tasks.withType(Test).configureEach {
	useJUnitPlatform()
}

dependencies {
	// --- Spring starters ---
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux' // 버전 명시 X (BOM 관리)
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	// --- Swagger/OpenAPI ---
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

	// --- Database ---
	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// --- JWT ---
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation 'com.nimbusds:nimbus-jose-jwt:9.37'

	// --- Google / Firebase ---
	implementation 'com.google.api-client:google-api-client:1.34.1'
	implementation 'com.google.http-client:google-http-client-jackson2:1.43.3'
	implementation 'com.google.oauth-client:google-oauth-client:1.34.1'
	implementation 'com.google.auth:google-auth-library-oauth2-http:1.19.0'
	implementation 'com.google.apis:google-api-services-sheets:v4-rev612-1.25.0'
	implementation 'com.google.firebase:firebase-admin:9.2.0'

	// Sentry BOM 추가하여 버전 관리 일원화
	implementation platform("io.sentry:sentry-bom:8.19.0")
	implementation "io.sentry:sentry-spring-boot-starter-jakarta"

	// cloudwatch
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	// --- Lombok ---
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// --- Test ---
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Mockito
	testImplementation 'org.mockito:mockito-junit-jupiter' // 버전 명시 X (BOM 관리)

	// H2 (test 기본 DB)
	testImplementation 'com.h2database:h2'

	// Testcontainers (BOM으로 버전 일관성)
	testImplementation platform('org.testcontainers:testcontainers-bom:1.21.3')
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:mysql'

	// Mock Web Server
	testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
}

